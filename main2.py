import os
import time
import webbrowser
from tkinter import (Tk, Button, Label, filedialog, Text, messagebox,
                     Frame, Scrollbar, StringVar, Menu)
from ttkthemes import ThemedTk
import matplotlib.pyplot as plt
import numpy as np
from fpdf import FPDF


class WebError(Exception):
    """Exception for web-related errors."""
    pass


class PDFError(Exception):
    """Exception for PDF-related errors."""
    pass


class CryptoVerifier:
    """Class for handling cryptographic checks and PDF processing."""

    def __init__(self):
        self.file_path = ""
        self.crypto_checks = ["RSA check", "SHA-256 validation", "AES-128 encryption check"]

    def perform_crypto_checks(self):
        """Generator function to simulate cryptographic checks."""
        for check in self.crypto_checks:
            time.sleep(1)  # Simulating a time-consuming process
            yield check

    def verify_pdf(self, pdf_path):
        """Mock-up function to simulate PDF verification."""
        if not os.path.exists(pdf_path):
            raise PDFError("File does not exist.")
        # Simulate the verification process
        time.sleep(2)
        return True


class CryptoVerifierApp(CryptoVerifier):
    """Main application class for the GUI."""

    def __init__(self, root):
        super().__init__()
        self.root = root
        self.result_text = None
        self.theme_var = StringVar(value="breeze")  # Default theme

    def change_theme(self, theme_name):
        """Change the theme of the application."""
        themes = {
            "green nature bubble": "green",
            "macbook app brown": "brown",
            "iphone app grey": "grey",
            "purple Among us Adhd": "purple"
        }
        self.root.theme_use(themes.get(theme_name, "breeze"))

    def select_file(self, file_label, process_button=None):
        """Select a file."""
        file_path = filedialog.askopenfilename(filetypes=[("PDF files", "*.pdf")])
        if file_path:
            file_label.config(text=file_path)
            self.file_path = file_path

    def process_pdf(self):
        """Process the PDF."""
        try:
            if not self.file_path:
                # Generate a default PDF if none is selected
                self.generate_default_pdf()
                self.result_text.insert("end", "No PDF selected. A default PDF has been generated.\n")
            for check in self.perform_crypto_checks():
                self.result_text.insert("end", f"{check} completed.\n")
            new_file_path = self.file_path.replace(".pdf", " - Verified.pdf")
            self.result_text.insert("end", f"PDF processed and saved as {new_file_path}.\n")
            # simulation pop-up
            messagebox.showinfo("Processed", "PDF has been processed successfully!")
        except (PDFError, WebError) as e:
            self.send_error_report(str(e))
            messagebox.showerror("Error", str(e))

    def generate_default_pdf(self):
        """Generate a default PDF."""
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        pdf.multi_cell(0, 10, "This is a default PDF generated by CryptoSafe Caf√©.")
        pdf.output("default.pdf")
        self.file_path = "default.pdf"

    def send_error_report(self, error_message):
        """Send error report (currently prints to console)."""
        print(f"Sending error report: {error_message}")

    def setup_ui(self):
        """Set up the main UI components."""
        # Menu
        menu = Menu(self.root)
        self.root.config(menu=menu)
        file_menu = Menu(menu)
        menu.add_cascade(label="File", menu=file_menu)
        file_menu.add_command(label="Exit", command=self.root.quit)

        # Sidebar for navigation
        sidebar = Frame(self.root, padx=10, pady=10, bg="lightgray")
        sidebar.pack(side="left", fill="y")
        Button(sidebar, text="Home", command=self.show_home).pack(pady=10)
        Button(sidebar, text="Settings", command=self.show_settings).pack(pady=10)
        Button(sidebar, text="Support", command=self.open_support_link).pack(pady=10)

        # Main content area
        content_frame = Frame(self.root, padx=10, pady=10)
        content_frame.pack(side="right", fill="both", expand=True)

        # File selection frame
        file_frame = Frame(content_frame, padx=10, pady=10)
        file_frame.pack(pady=20)

        file_label = Label(file_frame, text="No file selected", width=50, anchor="w")
        file_label.grid(row=0, column=0, padx=10)

        select_button = Button(file_frame, text="Select PDF", command=lambda: self.select_file(file_label))
        select_button.grid(row=0, column=1)

        # Processing frame
        process_frame = Frame(content_frame, padx=10, pady=10)
        process_frame.pack(pady=20)

        process_button = Button(process_frame, text="Process PDF", command=self.process_pdf)
        process_button.pack()

        # Results text area
        result_frame = Frame(content_frame, padx=10, pady=10)
        result_frame.pack(pady=20, fill="both", expand=True)

        scrollbar = Scrollbar(result_frame)
        scrollbar.pack(side="right", fill="y")

        self.result_text = Text(result_frame, wrap="word", yscrollcommand=scrollbar.set)
        self.result_text.pack(fill="both", expand=True)
        scrollbar.config(command=self.result_text.yview)

        # Status bar
        status_var = StringVar()
        status_var.set("Ready")
        status_bar = Label(self.root, textvariable=status_var, bd=1, relief="sunken", anchor="w")
        status_bar.pack(side="bottom", fill="x")

    def show_home(self):
        """Display the home screen."""
        for widget in self.root.winfo_children():
            widget.destroy()
        Label(self.root, text="Welcome to CryptoSafe Caf√©!", font=("Arial", 24)).pack(pady=20)
        Label(self.root, text="Select a PDF to verify its cryptographic signatures.", font=("Arial", 14)).pack(pady=10)
        self.setup_ui()

    def show_settings(self):
        """Display the settings screen."""
        for widget in self.root.winfo_children():
            widget.destroy()
        Label(self.root, text="Settings", font=("Arial", 24)).pack(pady=20)
        Label(self.root, text="Choose a theme:", font=("Arial", 14)).pack(pady=10)
        themes = ["green nature bubble", "macbook app brown", "iphone app grey", "purple Among us Adhd", "breeze"]
        for theme in themes:
            Button(self.root, text=theme, command=lambda t=theme: self.change_theme(t)).pack(pady=5)
        Button(self.root, text="Back to Home", command=self.show_home).pack(pady=20)

    def open_support_link(self):
        webbrowser.open("https://ko-fi.com/kvnbbg")

def create_watermarked_nft():
    """Simulates the creation of an NFT and adds a watermark."""
    fig, ax = plt.subplots(figsize=(6, 6))
    x = np.linspace(0, 10, 100)
    y = np.sin(x)
    ax.plot(x, y, label='Sample NFT')
    ax.legend()
    fig.text(0.15, 0.15, 'Kvnbbg', fontsize=40, color='gray', alpha=0.5)
    fig.text(0.65, 0.15, 'üé®', fontsize=40, color='blue',
             alpha=0.5)  # Using art palette emoji for NFT
    plt.title("Your Created NFT üñºÔ∏è")
    plt.savefig("NFT_with_watermark.png")
    plt.show()

if __name__ == "__main__":
    root = ThemedTk(theme="breeze")
    root.title("CryptoSafe Caf√©")
    root.geometry("700x500")
    app = CryptoVerifierApp(root)
    app.setup_ui()
    root.mainloop()
